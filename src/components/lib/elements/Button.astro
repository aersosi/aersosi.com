---
const {
	variant,
	size,
	iconOnly = false,
	gap,
	isLink = false,
	class: className,
	...rest
} = Astro.props;
const defaultClass = [
	// light
	"text-white",
	"bg-base-800",
	"hover:bg-base-900",
	"focus:ring-base-800",
	// dark
	"dark:text-base-900",
	"dark:bg-base-100",
	"dark:hover:bg-base-300",
	"dark:focus:ring-base-100",
];

const primaryClass = [
	// light
	"text-white",
	"bg-primary-400",
	"hover:bg-primary-500",
	"focus:ring-primary-400",
	// dark
	"dark:text-base-950",
	"dark:bg-primary-300",
	"dark:hover:bg-primary-200",
	"dark:focus:ring-primary-300",
];

const secondaryClass = [
	// light
	"text-base-950",
	"bg-secondary-400",
	"hover:bg-secondary-500",
	"focus:ring-secondary-400",
	// dark
	"dark:text-base-950",
	"dark:bg-secondary-300",
	"dark:hover:bg-secondary-200",
	"dark:focus:ring-secondary-300",
];

const accentClass = [
	// light
	"text-white",
	"bg-accent-600",
	"hover:bg-accent-700",
	"focus:ring-accent-600",
	// dark
	"dark:text-black",
	"dark:bg-accent-400",
	"dark:hover:bg-accent-300",
	"dark:focus:ring-accent-400",
];

const mutedClass = [
	// light
	"text-white",
	"bg-base-600",
	"hover:bg-base-700",
	"focus:ring-base-600",

	//dark
	"dark:text-base-900",
	"dark:bg-base-100",
	"dark:hover:bg-base-300",
	"dark:focus:ring-base-100",
];

// Size
const sizes = {
	xxs: ["h-8", "px-3", "py-2", "text-xs"],
	xs: ["h-9", "px-3", "py-2", "text-xs"],
	sm: ["h-10", "px-4", "py-3", "text-sm"],
	base: ["h-11", "px-4", "py-3", "text-base"],
	lg: ["h-12", "px-5", "py-4", "text-lg"],
	xl: ["h-13", "px-5", "py-4", "text-xl"],
};
// Icon size
const iconSizes = {
	xxs: ["size-8", "py-2", "text-xs"],
	xs: ["size-9", "text-xs"],
	sm: ["size-10", "text-sm"],
	base: ["size-11", "text-base"],
	lg: ["size-12", "text-lg"],
	xl: ["size-13", "text-xl"],
};
// Gaps
const gapMap = {
	xxs: ["gap-1.5"],
	xs: ["gap-2"],
	sm: ["gap-4"],
	base: ["gap-8"],
	lg: ["gap-10"],
	xl: ["gap-12"],
};
const variantClass = {
	default: defaultClass,
	primary: primaryClass,
	secondary: secondaryClass,
	accent: accentClass,
	muted: mutedClass,
	none: [],
};
const sizeClass = iconOnly ? iconSizes[size] : sizes[size] || [];
const gapClass = !iconOnly && gap ? gapMap[gap] : [];
const additionalClasses = className ? className.split(" ") : [];
const baseClass = [
	"flex",
	"items-center",
	"font-medium",
	"justify-center",
	"transition-all",
	"rounded-lg",
	"items-center",
	"duration-300",
	"focus:ring-2",
	"focus:ring-none",
	"focus:ring-offset-1",
	"focus:ring-offset-white",
	// Dark
	"dark:focus:ring-offset-base-900",
];
---

{
	isLink ? (
		<a
			href={rest.href}
			class:list={[
				...baseClass,
				...(variantClass[variant] || []),
				...sizeClass,
				...gapClass,
				...additionalClasses,
			]}
			{...rest}
		>
			{iconOnly ? (
				<slot name="icon" />
			) : (
				<>
					<slot name="left-icon" />
					<slot />
					<slot name="right-icon" />
				</>
			)}
		</a>
	) : (
		<button
			class:list={[
				...baseClass,
				...(variantClass[variant] || []),
				...sizeClass,
				...gapClass,
				...additionalClasses,
			]}
			{...rest}
		>
			{iconOnly ? (
				<slot name="icon" />
			) : (
				<>
					<slot name="left-icon" />
					<slot />
					<slot name="right-icon" />
				</>
			)}
		</button>
	)
}
