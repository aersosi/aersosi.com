---
export interface Props {
  tag?:
    | "a"
    | "p"
    | "em"
    | "span"
    | "small"
    | "strong"
    | "summary"
    | "blockquote"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"; // Defines allowed HTML tags
  id?: string; // Optional 'id' attribute
  href?: string; // Optional 'href' attribute for anchor tags
  class?: string; // Optional prop for additional custom classes
  variant?: string; // Specifies the style variant of the text
}

// Define text styles for each variant
const textStyles: Record<string, string> = {
  display6XL:
    "text-4xl leading-tight tracking-tight sm:text-7xl md:text-9xl lg:text-[12rem]",
  display5XL:
    "text-4xl leading-tight tracking-tight sm:text-7xl md:text-8xl lg:text-[10rem]",
  display4XL:
    "text-4xl leading-tight tracking-tight sm:text-7xl md:text-8xl lg:text-9xl",
  display3XL:
    "text-4xl leading-tight tracking-tight sm:text-6xl md:text-7xl lg:text-8xl",
  display2XL:
    "text-5xl leading-tight tracking-tight sm:text-5xl md:text-6xl lg:text-7xl",
  displayXL:
    "text-4xl leading-tight tracking-tight sm:text-4xl md:text-5xl lg:text-6xl",
  displayLG:
    "text-3xl leading-tight tracking-tight sm:text-3xl md:text-4xl lg:text-5xl",
  displayMD:
    "text-2xl leading-tight tracking-tight sm:text-2xl md:text-3xl lg:text-4xl",
  displaySM: "text-lg leading-tight sm:text-xl md:text-2xl lg:text-3xl",
  displayXS:
    "text-base leading-tight sm:text-lg md:text-xl lg:text-2xl",
  textXL: "text-xl xl:text-2xl 2xl:text-3xl",
  textLG: "text-lg xl:text-xl 2xl:text-2xl",
  textBase: "text-base xl:text-lg 2xl:text-xl",
  textSM: "text-sm xl:text-base 2xl:text-lg",
  textXS: "text-xs xl:text-sm 2xl:text-base",
};

// Destructure props with default values
const {
  tag: Tag = "p", // Defaults to paragraph tag
  variant = "textBase", // Defaults to textBase style variant
  class: className = "", // No additional classes by default
  ...rest // Collect remaining props
} = Astro.props;

// Get the base classes for the specified variant
const baseClasses = textStyles[variant] || textStyles.textBase; // Fallback to textBase if variant not found

// Combine base classes with any additional custom classes
const combinedClasses = `${baseClasses} ${className}`.trim();
---
<Tag
  class={combinedClasses}
  {...rest} 
>
  <slot name="left-icon" />
  <slot />
  <slot name="right-icon" />
</Tag>
