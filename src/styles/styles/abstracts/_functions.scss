@use 'sass:math';
@use '../utils/_private-css-type-check' as tc;

// @function decimal-round();

// This function extends Sass's native number rounding capabilities, allowing for precise decimal rounding.
// Rounds a number to a specified number of decimal places.

// @param $number [Number] - The number to round.
// @param $digits [Number] - The number of decimal places to round to. Defaults to 0.
// @param $mode [String] - The rounding mode: 'round', 'ceil', or 'floor'. Defaults to 'round'.
//   - 'round' rounds the number to the nearest value.
//   - 'ceil' rounds the number up to the nearest value.
//   - 'floor' rounds the number down to the nearest value.
// @return [Number] - The rounded number.

// @warning
//   - If `$number` is not a number, it triggers a warning and returns the original value.
//   - If `$digits` is not a number or has a unit, it triggers a warning and returns the original `$number`.
//   - If `$mode` is not one of the defined keywords, it triggers a warning and returns the original `$number`.

// @example
//   decimal-round(1.005, 2); // Returns 1.01 with default rounding mode.
// @example
//   decimal-round(2.5, 0, 'floor'); // Returns 2.
// @example
//   decimal-round(2.5, 0, 'ceil'); // Returns 3.
// @example
//   decimal-round(3.14159, 3, 'round'); // Returns 3.142.

@function decimal-round($number, $digits: 0, $mode: round) {
  $n: 1;

  // $number must be a number
  $number: tc.is-number($number, 'number');
  // $digits must be a unitless number
  $digits: tc.is-unitless-number($digits, 'digits');

  @if $digits > 0 {
    @for $i from 1 through $digits {
      $n: $n * 10;
    }
  }
  @if $mode == round {
    @return calc(round($number * $n) / $n);
  } @else if $mode == ceil {
    @return calc(ceil($number * $n) / $n);
  } @else if $mode == floor {
    @return calc(floor($number * $n) / $n);
  } @else {
    @warn '#{ $mode } is undefined keyword.';
    @return $number;
  }
}

// @function clamp-size();

// @description
// Dynamically calculates a responsive size using the CSS `clamp()` function.
// This method ensures that the size scales smoothly between a set minimum and maximum size
// based on the browser's viewport width.

// @param $browser-min [Number] - The minimum browser width where scaling starts.
// @param $browser-max [Number] - The maximum browser width where scaling ends.
// @param $size-min [Number] - The minimum size.
// @param $size-max [Number] - The maximum size.

// @example
//   body {
//     font-size: clamp-size(320px, 1200px, 1rem, 2rem);
//   }

//   .dynamic-margin {
//     margin: clamp-size(320px, 1200px, 1rem, 2rem);
//   }

@function clamp-size($browser-min, $browser-max, $size-min, $size-max) {
  // Passed values must be unitless numbers
  $browser-min: tc.is-unitless-number($browser-min, 'browser-min');
  $browser-max: tc.is-unitless-number($browser-max, 'browser-max');
  $browser-max: tc.is-unitless-number($size-min, 'browser-max');
  $browser-max: tc.is-unitless-number($size-max, 'browser-max');

  $factor: calc(1 / $browser-max - $browser-min) * ($size-max - $size-min);
  $px: decimal-round(($size-min * 1px) - ($browser-min * $factor), 4);
  $vw: decimal-round(100vw * $factor, 4);
  $min-size: if($size-min > $size-max, #{$size-max}px, #{$size-min}px);
  $max-size: if($size-min > $size-max, #{$size-min}px, #{$size-max}px);

  @return clamp(#{$min-size}, #{$px} + #{$vw}, #{$max-size});
}


